clear;
clc;
close all;

% Constants
M_infty = 8.4; % Freestream Mach number
gamma_infty = 1.4; % Freestream gamma
R = 287; % Gas constant

%% FREESTREAM CONDITIONS
% Calculate freestream conditions at an altitude of 27,500 meters
[T_infty, P_infty] = FreestreamConditions_working(27500);

%% STAGNATION CONDITIONS
% Calculate stagnation conditions based on freestream conditions
[Tt_infty, Pt_infty] = StagnationConditions_working(T_infty, P_infty, M_infty, gamma_infty);

%% INLET
% Define shock angle range and deflection angles for the inlet
beta_array = 0.01:0.1:90;
theta_array = [9 8 7 6]; % Deflection angles

% Calculate inlet flow properties
[inlet_Mach_array, inlet_temps, inlet_pressures, temp_ratio, pressure_ratio, beta] = inlet_working(theta_array, M_infty, gamma_infty, beta_array, T_infty, P_infty);

% Display the Mach number at the inlet exit
fprintf('Mach Number at inlet exit = %.3f\n', inlet_Mach_array(end));
fprintf('------------------------------------------------------------------\n');

%% ISOLATOR - STATION 1 TO 2
% Values from inlet exit
M1 = inlet_Mach_array(end);
T1 = inlet_temps(end);
P1 = inlet_pressures(end);

gamma_isolator = 1.36; % Heat capacity ratio in the isolator

% Define pressure recovery and static pressure ratios for the isolator
iso_pt_ratio = 0.3; % Total pressure recovery ratio (pt2/pt1)
iso_p_ratio = 1.9; % Static pressure ratio (p2/p1)
iso_area = 50e-3 * 70e-3; % Cross-sectional area (m^2)
iso_length = 350e-3; % Length of the isolator (m)

% Calculate isolator flow properties
[M2, T2, P2, m2_dot] = isolator_working(iso_pt_ratio, iso_p_ratio, M1, T1, P1, gamma_isolator, iso_area, R);

% Display the results from the isolator
fprintf('Mach number at isolator exit: %.2f\n', M2);
fprintf('------------------------------------------------------------------\n');
fprintf('Static temperature at isolator exit: %.2f K\n', T2);
fprintf('------------------------------------------------------------------\n');
fprintf('Static pressure at isolator exit: %.2f Pa\n', P2);
fprintf('------------------------------------------------------------------\n');
fprintf('Mass flow rate at isolator exit: %.2f kg/s\n', m2_dot);
fprintf('------------------------------------------------------------------\n');

%% COMBUSTOR
% Define combustor parameters
M4_array = [1.1, 1.2, 1.1, 1.05, 1.02]; % Array of Mach numbers at the combustor exit
gamma_combustor = gamma_isolator; % Heat capacity ratio in the combustor
combustor_expansion_angle = 1; % Expansion angle of the combustor (degrees)
initial_combustor_height = 50e-3; % Initial height of the combustor (m)
initial_combustor_width = 70e-3; % Initial width of the combustor (m)

% Load pressure distribution data for the combustor
CombustorPressureDistribution = load('CombustorPressureDistribution.mat');
pressure_distributions = {'X90'}; % Specify which pressure distributions to use

for z = 1:length(pressure_distributions)
    % Extract the current distribution name
    dist_name = pressure_distributions{z};
    
    % Extract the pressure ratios and lengths for the current distribution
    com_p_ratios = CombustorPressureDistribution.(dist_name)(:, 2);
    com_p_ratio_lengths = CombustorPressureDistribution.(dist_name)(:, 1) * 1e-3; % Convert to meters
    
    % Calculate the thrust generated by the combustor
    [combustor_thrust, P4, A4] = combustor_working(P2, com_p_ratios, com_p_ratio_lengths, initial_combustor_height, initial_combustor_width, combustor_expansion_angle);
    
    % Display the total combustor thrust
    fprintf('Total Combustor thrust for %s: %.2f N\n', dist_name, combustor_thrust);
    fprintf('------------------------------------------------------------------\n');
end

%% NOZZLE
% Define nozzle parameters
mf = 0.0682 * m2_dot; % Mass flow rate (kg/s)
nozzle_expansion_angle = 3; % Expansion angle of the nozzle (degrees)
M4 = M4_array(2); % Mach number at nozzle entrance
discrete_lengths = linspace(0.005, 0.5, 100); % Discrete lengths along the nozzle (m)
initial_nozzle_height = 50e-3 + (2 * tand(combustor_expansion_angle) * 1); % Initial height of the nozzle (m)
initial_nozzle_width = 70e-3; % Initial width of the nozzle (m)

% Calculate total pressure at the nozzle entrance
Pt4 = P4 * (1 + ((gamma_combustor - 1) / 2) * M4^2)^(gamma_combustor / (gamma_combustor - 1));
gamma_nozzle = gamma_combustor; % Heat capacity ratio in the nozzle

% Calculate nozzle flow properties and thrust
[nozzle_thrust, A9, M_bar, M_tests] = nozzle_working(A4, gamma_nozzle, Pt4, M4, initial_nozzle_height, initial_nozzle_width, discrete_lengths, nozzle_expansion_angle);

% Display the total nozzle thrust
fprintf('Total Nozzle thrust for %s: %.2f N\n', dist_name, nozzle_thrust);

% Calculate total thrust and specific impulse
total_thrust = nozzle_thrust + combustor_thrust;
specific_impulse_g = total_thrust / (mf * 9.81);
specific_impulse = total_thrust / mf;

% Display final results
fprintf('------------------------------------------------------------------\n');
fprintf('Total thrust for %s: %.2f N\n', dist_name, total_thrust);
fprintf('------------------------------------------------------------------\n');
fprintf('Specific Impulse with g for %s: %.2f N/kg/s\n', dist_name, specific_impulse_g);
fprintf('Specific Impulse without g for %s: %.2f N/kg/s\n', dist_name, specific_impulse);
