function [nozzle_thrust, A9, M_bar, M_tests] = nozzle_working(A4, gamma_nozzle, Pt4, M4, initial_nozzle_height, initial_nozzle_width, discrete_lengths, nozzle_expansion_angle)
    % Function to calculate the thrust generated by the nozzle
    % Inputs:
    %   A4 - Cross-sectional area at nozzle entrance (m^2)
    %   gamma_nozzle - Heat capacity ratio at nozzle
    %   Pt4 - Total pressure at nozzle entrance (Pa)
    %   M4 - Mach number at nozzle entrance
    %   initial_nozzle_height - Initial height of the nozzle (m)
    %   initial_nozzle_width - Initial width of the nozzle (m)
    %   discrete_lengths - Array of distances along the nozzle (m)
    %   nozzle_expansion_angle - Expansion angle of the nozzle (degrees)
    % Outputs:
    %   nozzle_thrust - Total thrust generated by the nozzle (N)
    %   A9 - Cross-sectional area at nozzle exit (m^2)
    %   M_bar - Mach number at each discrete length (array)
    %   M_tests - Mach number solutions at each discrete length (array)

    % Calculate the area ratio A/A*
    area_ratio = (1 / M4^2) * ((2 / (gamma_nozzle + 1)) * (1 + ((gamma_nozzle - 1) / 2) * M4^2))^((gamma_nozzle + 1) / (gamma_nozzle - 1));

    % Calculate A* (throat area)
    A_star = A4 / sqrt(area_ratio);

    % Initialize nozzle thrust
    nozzle_thrust = 0;

    % Loop through each discrete length to calculate thrust contribution
    for i = 1:length(discrete_lengths)
        % Calculate the segment length
        if i == 1
            dx = discrete_lengths(i);
        else
            dx = discrete_lengths(i) - discrete_lengths(i - 1);
        end

        % Calculate the area at the current segment
        A_bar = initial_nozzle_width * ((2 * tand(nozzle_expansion_angle) * discrete_lengths(i)) + initial_nozzle_height);

        % Effective area of the segment
        A_eff = 2 * (initial_nozzle_width * tand(nozzle_expansion_angle) * dx);

        %% Solve for Mach Number
        syms M_bar
        A_ratio = A_bar / A_star;
        eqn = A_ratio^2 == (1 / M_bar^2) * ((2 / (gamma_nozzle + 1)) * (1 + ((gamma_nozzle - 1) / 2) * M_bar^2))^((gamma_nozzle + 1) / (gamma_nozzle - 1));
        
        % Solve for Mach number
        M_solution = vpasolve(eqn, M_bar, [1 10]);

        % Convert symbolic solutions to numeric
        M_solution_numeric = double(M_solution);

        % Filter out complex solutions
        real_solutions = M_solution_numeric(imag(M_solution_numeric) == 0);

        % Find the largest real solution
        M_bar = max(real_solutions);
        M_tests(i) = max(real_solutions);

        %% Thrust Contribution
        P_eff = (((1 + ((gamma_nozzle - 1) / 2) * M_bar^2))^(-gamma_nozzle / (gamma_nozzle - 1))) * Pt4;

        P_thrust = P_eff; % Uncomment if thrust needs to be adjusted by cosine factor
        nozzle_thrust = nozzle_thrust + (P_thrust * A_eff);
    end

    % Calculate the exit area of the nozzle
    A9 = initial_nozzle_width * (initial_nozzle_height + (2 * tand(nozzle_expansion_angle) * 0.5));
end
